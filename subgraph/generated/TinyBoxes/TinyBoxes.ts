// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RedeemedLE extends ethereum.Event {
  get params(): RedeemedLE__Params {
    return new RedeemedLE__Params(this);
  }
}

export class RedeemedLE__Params {
  _event: RedeemedLE;

  constructor(event: RedeemedLE) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SettingsChanged extends ethereum.Event {
  get params(): SettingsChanged__Params {
    return new SettingsChanged__Params(this);
  }
}

export class SettingsChanged__Params {
  _event: SettingsChanged;

  constructor(event: SettingsChanged) {
    this._event = event;
  }

  get settings(): Array<i32> {
    return this._event.parameters[0].value.toI32Array();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TinyBoxes__readSettingsResult {
  value0: i32;
  value1: i32;
  value2: i32;

  constructor(value0: i32, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }

  getBkg(): i32 {
    return this.value0;
  }

  getDuration(): i32 {
    return this.value1;
  }

  getOptions(): i32 {
    return this.value2;
  }
}

export class TinyBoxes__tokenDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: Array<i32>;
  value5: Array<i32>;
  value6: i32;
  value7: Array<i32>;
  value8: i32;
  value9: i32;
  value10: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: Array<i32>,
    value5: Array<i32>,
    value6: i32,
    value7: Array<i32>,
    value8: i32,
    value9: i32,
    value10: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromI32Array(this.value4));
    map.set("value5", ethereum.Value.fromI32Array(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromI32Array(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set(
      "value10",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value10))
    );
    return map;
  }

  getRandomness(): BigInt {
    return this.value0;
  }

  getAnimation(): BigInt {
    return this.value1;
  }

  getShapes(): i32 {
    return this.value2;
  }

  getHatching(): i32 {
    return this.value3;
  }

  getSize(): Array<i32> {
    return this.value4;
  }

  getSpacing(): Array<i32> {
    return this.value5;
  }

  getMirroring(): i32 {
    return this.value6;
  }

  getColor(): Array<i32> {
    return this.value7;
  }

  getContrast(): i32 {
    return this.value8;
  }

  getShades(): i32 {
    return this.value9;
  }

  getScheme(): i32 {
    return this.value10;
  }
}

export class TinyBoxes extends ethereum.SmartContract {
  static bind(address: Address): TinyBoxes {
    return new TinyBoxes("TinyBoxes", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ANIMATION_COUNT(): i32 {
    let result = super.call("ANIMATION_COUNT", "ANIMATION_COUNT():(uint8)", []);

    return result[0].toI32();
  }

  try_ANIMATION_COUNT(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "ANIMATION_COUNT",
      "ANIMATION_COUNT():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SCHEME_COUNT(): i32 {
    let result = super.call("SCHEME_COUNT", "SCHEME_COUNT():(uint8)", []);

    return result[0].toI32();
  }

  try_SCHEME_COUNT(): ethereum.CallResult<i32> {
    let result = super.tryCall("SCHEME_COUNT", "SCHEME_COUNT():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  TOKEN_LIMIT(): i32 {
    let result = super.call("TOKEN_LIMIT", "TOKEN_LIMIT():(uint16)", []);

    return result[0].toI32();
  }

  try_TOKEN_LIMIT(): ethereum.CallResult<i32> {
    let result = super.tryCall("TOKEN_LIMIT", "TOKEN_LIMIT():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _tokenIds(): BigInt {
    let result = super.call("_tokenIds", "_tokenIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__tokenIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tokenIds", "_tokenIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tokenPromoIds(): BigInt {
    let result = super.call("_tokenPromoIds", "_tokenPromoIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__tokenPromoIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_tokenPromoIds",
      "_tokenPromoIds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  avgBlockTime(): i32 {
    let result = super.call("avgBlockTime", "avgBlockTime():(uint8)", []);

    return result[0].toI32();
  }

  try_avgBlockTime(): ethereum.CallResult<i32> {
    let result = super.tryCall("avgBlockTime", "avgBlockTime():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  blockStart(): BigInt {
    let result = super.call("blockStart", "blockStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockStart", "blockStart():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  currentPhase(): i32 {
    let result = super.call("currentPhase", "currentPhase():(uint8)", []);

    return result[0].toI32();
  }

  try_currentPhase(): ethereum.CallResult<i32> {
    let result = super.tryCall("currentPhase", "currentPhase():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTokenLE(id: BigInt): boolean {
    let result = super.call("isTokenLE", "isTokenLE(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_isTokenLE(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTokenLE", "isTokenLE(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  phaseCountdown(): BigInt {
    let result = super.call("phaseCountdown", "phaseCountdown():(uint256)", []);

    return result[0].toBigInt();
  }

  try_phaseCountdown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "phaseCountdown",
      "phaseCountdown():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phaseCountdownTime(): BigInt {
    let result = super.call(
      "phaseCountdownTime",
      "phaseCountdownTime():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_phaseCountdownTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "phaseCountdownTime",
      "phaseCountdownTime():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phaseLen(): i32 {
    let result = super.call("phaseLen", "phaseLen():(uint16)", []);

    return result[0].toI32();
  }

  try_phaseLen(): ethereum.CallResult<i32> {
    let result = super.tryCall("phaseLen", "phaseLen():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  readSettings(id: BigInt): TinyBoxes__readSettingsResult {
    let result = super.call(
      "readSettings",
      "readSettings(uint256):(uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new TinyBoxes__readSettingsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32()
    );
  }

  try_readSettings(
    id: BigInt
  ): ethereum.CallResult<TinyBoxes__readSettingsResult> {
    let result = super.tryCall(
      "readSettings",
      "readSettings(uint256):(uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TinyBoxes__readSettingsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32()
      )
    );
  }

  referalNewPercent(): BigInt {
    let result = super.call(
      "referalNewPercent",
      "referalNewPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_referalNewPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referalNewPercent",
      "referalNewPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referalPercent(): BigInt {
    let result = super.call("referalPercent", "referalPercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_referalPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referalPercent",
      "referalPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  renderPreview(
    seed: string,
    color: Array<i32>,
    shapes: Array<i32>,
    size: Array<i32>,
    spacing: Array<i32>,
    mirroring: i32,
    settings: Array<i32>,
    traits: Array<i32>,
    slot: string
  ): string {
    let result = super.call(
      "renderPreview",
      "renderPreview(string,uint16[3],uint8[2],uint8[4],uint8[2],uint8,uint8[3],uint8[4],string):(string)",
      [
        ethereum.Value.fromString(seed),
        ethereum.Value.fromI32Array(color),
        ethereum.Value.fromI32Array(shapes),
        ethereum.Value.fromI32Array(size),
        ethereum.Value.fromI32Array(spacing),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(mirroring)),
        ethereum.Value.fromI32Array(settings),
        ethereum.Value.fromI32Array(traits),
        ethereum.Value.fromString(slot)
      ]
    );

    return result[0].toString();
  }

  try_renderPreview(
    seed: string,
    color: Array<i32>,
    shapes: Array<i32>,
    size: Array<i32>,
    spacing: Array<i32>,
    mirroring: i32,
    settings: Array<i32>,
    traits: Array<i32>,
    slot: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "renderPreview",
      "renderPreview(string,uint16[3],uint8[2],uint8[4],uint8[2],uint8,uint8[3],uint8[4],string):(string)",
      [
        ethereum.Value.fromString(seed),
        ethereum.Value.fromI32Array(color),
        ethereum.Value.fromI32Array(shapes),
        ethereum.Value.fromI32Array(size),
        ethereum.Value.fromI32Array(spacing),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(mirroring)),
        ethereum.Value.fromI32Array(settings),
        ethereum.Value.fromI32Array(traits),
        ethereum.Value.fromString(slot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  testRandom(): Bytes {
    let result = super.call("testRandom", "testRandom():(bytes32)", []);

    return result[0].toBytes();
  }

  try_testRandom(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("testRandom", "testRandom():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenArt(
    _id: BigInt,
    bkg: i32,
    duration: i32,
    options: i32,
    slot: string
  ): string {
    let result = super.call(
      "tokenArt",
      "tokenArt(uint256,uint8,uint8,uint8,string):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(bkg)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(duration)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(options)),
        ethereum.Value.fromString(slot)
      ]
    );

    return result[0].toString();
  }

  try_tokenArt(
    _id: BigInt,
    bkg: i32,
    duration: i32,
    options: i32,
    slot: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenArt",
      "tokenArt(uint256,uint8,uint8,uint8,string):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(bkg)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(duration)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(options)),
        ethereum.Value.fromString(slot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenArt1(_id: BigInt): string {
    let result = super.call("tokenArt", "tokenArt(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toString();
  }

  try_tokenArt1(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenArt", "tokenArt(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenData(_id: BigInt): TinyBoxes__tokenDataResult {
    let result = super.call(
      "tokenData",
      "tokenData(uint256):(uint128,uint256,uint8,uint8,uint8[4],uint8[2],uint8,uint16[3],uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new TinyBoxes__tokenDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32Array(),
      result[5].toI32Array(),
      result[6].toI32(),
      result[7].toI32Array(),
      result[8].toI32(),
      result[9].toI32(),
      result[10].toI32()
    );
  }

  try_tokenData(_id: BigInt): ethereum.CallResult<TinyBoxes__tokenDataResult> {
    let result = super.tryCall(
      "tokenData",
      "tokenData(uint256):(uint128,uint256,uint8,uint8,uint8[4],uint8[2],uint8,uint16[3],uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TinyBoxes__tokenDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32Array(),
        value[5].toI32Array(),
        value[6].toI32(),
        value[7].toI32Array(),
        value[8].toI32(),
        value[9].toI32(),
        value[10].toI32()
      )
    );
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trueID(id: BigInt): i32 {
    let result = super.call("trueID", "trueID(uint256):(int8)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toI32();
  }

  try_trueID(id: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("trueID", "trueID(uint256):(int8)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  unredeemed(id: BigInt): boolean {
    let result = super.call("unredeemed", "unredeemed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_unredeemed(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("unredeemed", "unredeemed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get rand(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _renderer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChangeSettingsCall extends ethereum.Call {
  get inputs(): ChangeSettingsCall__Inputs {
    return new ChangeSettingsCall__Inputs(this);
  }

  get outputs(): ChangeSettingsCall__Outputs {
    return new ChangeSettingsCall__Outputs(this);
  }
}

export class ChangeSettingsCall__Inputs {
  _call: ChangeSettingsCall;

  constructor(call: ChangeSettingsCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get settings(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class ChangeSettingsCall__Outputs {
  _call: ChangeSettingsCall;

  constructor(call: ChangeSettingsCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _seed(): string {
    return this._call.inputValues[0].value.toString();
  }

  get shapes(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get color(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get size(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get spacing(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get mirroring(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get recipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get referalID(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintLECall extends ethereum.Call {
  get inputs(): MintLECall__Inputs {
    return new MintLECall__Inputs(this);
  }

  get outputs(): MintLECall__Outputs {
    return new MintLECall__Outputs(this);
  }
}

export class MintLECall__Inputs {
  _call: MintLECall;

  constructor(call: MintLECall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintLECall__Outputs {
  _call: MintLECall;

  constructor(call: MintLECall) {
    this._call = call;
  }
}

export class RedeemLECall extends ethereum.Call {
  get inputs(): RedeemLECall__Inputs {
    return new RedeemLECall__Inputs(this);
  }

  get outputs(): RedeemLECall__Outputs {
    return new RedeemLECall__Outputs(this);
  }
}

export class RedeemLECall__Inputs {
  _call: RedeemLECall;

  constructor(call: RedeemLECall) {
    this._call = call;
  }

  get seed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get shapes(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get color(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get size(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get spacing(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get mirroring(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get id(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RedeemLECall__Outputs {
  _call: RedeemLECall;

  constructor(call: RedeemLECall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetPauseCall extends ethereum.Call {
  get inputs(): SetPauseCall__Inputs {
    return new SetPauseCall__Inputs(this);
  }

  get outputs(): SetPauseCall__Outputs {
    return new SetPauseCall__Outputs(this);
  }
}

export class SetPauseCall__Inputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPauseCall__Outputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetRandomCall extends ethereum.Call {
  get inputs(): SetRandomCall__Inputs {
    return new SetRandomCall__Inputs(this);
  }

  get outputs(): SetRandomCall__Outputs {
    return new SetRandomCall__Outputs(this);
  }
}

export class SetRandomCall__Inputs {
  _call: SetRandomCall;

  constructor(call: SetRandomCall) {
    this._call = call;
  }

  get rand(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRandomCall__Outputs {
  _call: SetRandomCall;

  constructor(call: SetRandomCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class StartCountdownCall extends ethereum.Call {
  get inputs(): StartCountdownCall__Inputs {
    return new StartCountdownCall__Inputs(this);
  }

  get outputs(): StartCountdownCall__Outputs {
    return new StartCountdownCall__Outputs(this);
  }
}

export class StartCountdownCall__Inputs {
  _call: StartCountdownCall;

  constructor(call: StartCountdownCall) {
    this._call = call;
  }

  get startBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartCountdownCall__Outputs {
  _call: StartCountdownCall;

  constructor(call: StartCountdownCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateRendererCall extends ethereum.Call {
  get inputs(): UpdateRendererCall__Inputs {
    return new UpdateRendererCall__Inputs(this);
  }

  get outputs(): UpdateRendererCall__Outputs {
    return new UpdateRendererCall__Outputs(this);
  }
}

export class UpdateRendererCall__Inputs {
  _call: UpdateRendererCall;

  constructor(call: UpdateRendererCall) {
    this._call = call;
  }

  get _renderer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRendererCall__Outputs {
  _call: UpdateRendererCall;

  constructor(call: UpdateRendererCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
